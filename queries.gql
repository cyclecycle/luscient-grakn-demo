# Where antecedent ent is

match $da (antecedent: $ant) isa functional_relationship; $ant (changed: $ent) isa drive_change; $ent isa named_entity has name "BFT"; offset 0; limit 30; get;

# Where consequent ent is

match $da (antecedent: $ant, consequent: $sub) isa functional_relationship; $sub (changed: $ent2) isa drive_change; $ent2 isa named_entity has name "polyamine catalyst spermine oxidase"; offset 0; limit 30; get;

match $da (antecedent: $ant, consequent: $sub) isa functional_relationship; $sub (changed: $ent2) isa drive_change; $ent2 isa named_entity has name "ROS"; offset 0; limit 30; get;

# dynamic association between specified two ents

match $da (antecedent: $ant, consequent: $sub) isa functional_relationship; $ant (changed: $ent) isa drive_change; $ent isa named_entity has name "BFT"; $sub (changed: $ent2) isa drive_change; $ent2 isa named_entity has name "polyamine catalyst spermine oxidase"; offset 0; limit 30; get;

match $da (antecedent: $ant, consequent: $sub) isa functional_relationship; $ant (changed: $ent) isa drive_change; $ent isa named_entity has name "B. fragilis"; $sub (changed: $ent2) isa drive_change; $ent2 isa named_entity has name "reactive oxygen species"; offset 0; limit 30; get;


# drive change

match
    $dc (changed: $ent) isa drive_change has valence $valence;
    $ent isa named_entity has name "BFT";
    $valence "DOWN";
get;

# dynamic chain rule debug

## get a DA, and get the sub entity

match $da (antecedent: $ant, consequent: $sub) isa functional_relationship; $ant (changed: $ant_ent) isa drive_change; $ant_ent isa named_entity has name "BFT"; $sub (changed: $sub_ent) isa drive_change; $sub_ent isa named_entity; offset 0; limit 30; get;

## get a DA, and get the sub entity, get drive changes of this entity

match $da (antecedent: $ant, consequent: $sub) isa functional_relationship; $ant (changed: $ant_ent) isa drive_change; $ant_ent isa named_entity has name "BFT"; $sub (changed: $sub_ent) isa drive_change; $sub_ent isa named_entity; $sub_ent_drive_changes (changed: $sub_ent) isa drive_change; offset 0; limit 30; get $sub_ent_drive_changes;

## get a DA, and get the sub entity, get drive changes of this entity, get dynamic associations of these drive changes

match $da (antecedent: $ant, consequent: $sub) isa functional_relationship; $ant (changed: $ant_ent) isa drive_change; $ant_ent isa named_entity has name "BFT"; $sub (changed: $sub_ent) isa drive_change; $sub_ent isa named_entity; $sub_ent_drive_changes (changed: $sub_ent) isa drive_change; $cascade_da (antecedent: $sub_ent_drive_changes) isa functional_relationship; offset 0; limit 30; get $cascade_da;

# Without fiddling around with valence it's simply:

match $da (antecedent: $ant, consequent: $sub) isa functional_relationship; $ant (changed: $ant_ent) isa drive_change; $ant_ent isa named_entity has name "BFT"; $cascade_da (antecedent: $sub, consequent: $sub2) isa functional_relationship; offset 0; limit 30; get $sub2;

# without limiting to an antecedent named ent:

match $da (antecedent: $ant, consequent: $sub) isa functional_relationship; $cascade_da (antecedent: $sub, consequent: $sub2) isa functional_relationship; offset 0; limit 30; get $sub2;

# so create:

insert (antecedent: $ant, consequent: $sub2) isa functional_relationship;

#

match $da (antecedent: $ant, consequent: $sub) isa functional_relationship; $ant (changed: $ant_ent) isa drive_change; $ent isa named_entity has name "BFT"; $sub (changed: $sub_ent) isa drive_change; $sub_ent isa named_entity has name "ROS"; offset 0; limit 30; get;

# subsequents of BFT

match $da (antecedent: $ant, consequent: $sub) isa functional_relationship; $ant (changed: $ant_ent) isa drive_change; $ent isa named_entity has name $ant_ent_name; $ant_ent_name "BFT"; $sub (changed: $sub_ent) isa drive_change; $sub_ent isa named_entity has name $sub_ent_name; offset 0; limit 30; get $ant_ent_name, $sub_ent_name;

# Subsequents of BFT increase

match 
    $dcr (antecedent: $ant, consequent: $sub) isa functional_relationship;
    $ant (changed: $ant_ent) isa drive_change has valence $ant_valence;
    $ent isa named_entity has name $ant_ent_name;
    $ant_ent_name "BFT";
    $ant_valence "UP";
    $sub (changed: $sub_ent) isa drive_change has valence $sub_valence;
    $sub_ent isa named_entity has name $sub_ent_name; 
get
    $ant_ent_name,
    $ant_valence,
    $sub_ent_name,
    $sub_valence;

# Subsequents of BFT decrease

match 
    $dcr (antecedent: $ant, consequent: $sub) isa functional_relationship;
    $ant (changed: $ant_ent) isa drive_change has valence $ant_valence;
    $ent isa named_entity has name $ant_ent_name;
    $ant_ent_name "BFT";
    $ant_valence "DOWN";
    $sub (changed: $sub_ent) isa drive_change has valence $sub_valence;
    $sub_ent isa named_entity has name $sub_ent_name; 
get
    $ant_ent_name,
    $ant_valence,
    $sub_ent_name,
    $sub_valence;

# For a da, get the ant and sub valences, and create a new da with the same ents but the opposite valences.

## UP UP becomes DOWN DOWN

when {
    $da (antecedent: $ant, consequent: $sub) isa functional_relationship;
    $ant (named_entity: $ant_ent, valence: $ant_valence) isa drive_change;
    $sub (named_entity: $sub_ent, valence: $sub_valence) isa drive_change;
    $ant_valence "UP";
    $sub_valence "UP";
}
then {
    $ant (named_entity: $ant_ent, valence: "DOWN") isa drive_change;
    $sub (named_entity: $sub_ent, valence: "DOWN") isa drive_change;
    $da_conv (antecedent: $ant, consequent: $sub) isa functional_relationship;
}

### debug

match
    $dcr (antecedent: $ant, consequent: $sub_) isa functional_relationship;
    $ant (changed: $ant_ent) isa drive_change has valence "UP";
    $sub_ (changed: $sub_ent) isa drive_change has valence "UP";
    $ant_conv (changed: $ant_ent) isa drive_change has valence "DOWN";
    $sub_conv (changed: $sub_ent) isa drive_change has valence "DOWN";
    $ant_ent has name "BFT";
get;

## UP DOWN becomes DOWN UP

when {
    $da (antecedent: $ant, consequent: $sub) isa functional_relationship;
    $ant (named_entity: $ant_ent, valence: $ant_valence) isa drive_change;
    $sub (named_entity: $sub_ent, valence: $sub_valence) isa drive_change;
    $ant_valence "UP";
    $sub_valence "DOWN";
}
then {
    $ant (named_entity: $ant_ent, valence: "DOWN") isa drive_change;
    $sub (named_entity: $sub_ent, valence: "UP") isa drive_change;
    $da_conv (antecedent: $ant, consequent: $sub) isa functional_relationship;
}

## DOWN UP becomes UP DOWN

when {
    $da (antecedent: $ant, consequent: $sub) isa functional_relationship;
    $ant (named_entity: $ant_ent, valence: $ant_valence) isa drive_change;
    $sub (named_entity: $sub_ent, valence: $sub_valence) isa drive_change;
    $ant_valence "DOWN";
    $sub_valence "UP";
}
then {
    $ant (named_entity: $ant_ent, valence: "UP") isa drive_change;
    $sub (named_entity: $sub_ent, valence: "DOWN") isa drive_change;
    $da_conv (antecedent: $ant, consequent: $sub) isa functional_relationship;
}

## DOWN DOWN becomes UP UP

when {
    $da (antecedent: $ant, consequent: $sub) isa functional_relationship;
    $ant (named_entity: $ant_ent, valence: $ant_valence) isa drive_change;
    $sub (named_entity: $sub_ent, valence: $sub_valence) isa drive_change;
    $ant_valence "DOWN";
    $sub_valence "DOWN";
}
then {
    $ant (named_entity: $ant_ent, valence: "UP") isa drive_change;
    $sub (named_entity: $sub_ent, valence: "UP") isa drive_change;
    $da_conv (antecedent: $ant, consequent: $sub) isa functional_relationship;
}

#

match (antecedent: $ant_change, consequent: $sub_change) isa functional_relationship; $sub_change (changed: $sub_ent) isa drive_change; $sub_ent isa named_entity has name "ROS"; $sub_drive_changes (changed: $sub_ent, valence: $valence) isa drive_change; $ant_change (changed: $ant_ent) isa drive_change; $ant_ent isa named_entity has name "BFT"; get;